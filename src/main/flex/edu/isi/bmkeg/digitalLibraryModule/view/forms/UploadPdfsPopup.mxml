<?xml version="1.0"?>
<!-- containers\spark\myComponents\MyLoginForm.mxml -->
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:udb="edu.isi.bmkeg.utils.updownload.*"
			   xmlns:updir="edu.isi.bmkeg.utils.uploadDirectoryControl.*"
			   close="handleCloseEvent();">
	<s:layout>
		<s:VerticalLayout paddingBottom="5" 
						  paddingTop="5"
						  paddingLeft="5"
						  paddingRight="5"/>
	</s:layout>
	
	<s:states>
		<s:State name="default"	/>
		<s:State name="loading"	/>
		<s:State name="loadingToCorpus"	/>
		<s:State name="corpusSpecified"	/>
	</s:states>
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.digitalLibrary.events.ClosePopupEvent;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Corpus;
			import edu.isi.bmkeg.digitalLibrary.rl.events.*;
			import edu.isi.bmkeg.utils.ServiceUtils;
			import edu.isi.bmkeg.vpdmf.model.instances.LightViewInstance;
			
			import mx.collections.ArrayCollection;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.Consumer;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.events.MessageFaultEvent;
			import mx.messaging.messages.AsyncMessage;
			
			import spark.events.IndexChangeEvent;

			public var vpdmfId:Number;

			[Bindable]
			public var codeFile:FileReference;

			[Bindable]
			public var ruleFiles:ArrayCollection = new ArrayCollection();

			[Bindable]
			public var tc:Corpus;
			
			[Bindable]
			public var message:String = "";
			
			[Bindable]
			public var max:int = -1;
			
			[Bindable]
			public var count:int = 0;
			
			public var consumer:Consumer;
			
			// Handle the close button and Cancel button.
			private function handleCloseEvent():void {
				
				this.dispatchEvent(new ClosePopupEvent(this));
			
			} 
			
			public function ruleFileLabelFunc(item:Object):String {
				
				if( item == null )
					return "-";	
				
				return item.vpdmfLabel; 
				
			}	
			
			protected function ruleFileControl_changeHandler(event:IndexChangeEvent):void
			{
				var item:LightViewInstance = LightViewInstance(
					ruleFiles.getItemAt(event.newIndex));
				//this.dispatchEvent(new FindFTDRuleSetByIdEvent(item.vpdmfId));*/
			}

			// Handle the OK button.
			private function handleOkEvent():void {
				
				if(this.tc == null ) 
					this.currentState = "loading";
				else 
					this.currentState = "loadingToCorpus";
				
				this.max = this.pdfUploadButton.fileList.length;
				this.count = 1;
				this.progressBar.setProgress(count, max);
				
				this.pdfUploadButton.startLoadingNextFile();
				
				this.consumer = new Consumer();
				var channelSet:ChannelSet = new ChannelSet();
				var endPoint:String = ServiceUtils.getMessagingEndpoint();
				var amf:AMFChannel = new AMFChannel(
					"my-polling-amf", 
					endPoint);
				amf.pollingEnabled = true;
				channelSet.addChannel(amf);
				consumer.channelSet = channelSet;
				consumer.destination = "serverUpdates";
				
				consumer.addEventListener(MessageEvent.MESSAGE, messageHandler);
				consumer.addEventListener(MessageFaultEvent.FAULT, faultHandler);
				
				consumer.subscribe();
			
			}
			
			// Handle the received message.
			private function messageHandler(event:MessageEvent):void {
				message = String(event.message.body);
			}
			
			// Handle a message fault.
			private function faultHandler(event:MessageFaultEvent):void {
				message = "Received fault: " + event.faultString + "\n";
			}

		]]>
	</fx:Script>
	
	<s:Form>
		<s:FormItem label="Corpus" includeIn="corpusSpecified, loadingToCorpus">
			<s:Label id="tcName" width="100%" text="{tc.vpdmfLabel}"/>
		</s:FormItem> 
				
		<s:FormItem label="PDF File / Folder">
			<updir:UploadDirectoryControl id="pdfUploadButton"
							   upTooltip="Upload PDFs to TriageCorpus"
							   unloadedMessage="- pdfs -" 
							   fileFilters="pdf,PDF"/> 	
		</s:FormItem> 
		
		<mx:ProgressBar id="progressBar"
						includeIn="loading,loadingToCorpus"
						width="100%" 
						mode="manual" 
						label="Loading %1 out of %2 files" 
						labelWidth="400"/>   
		
		<s:Label id="progressMessages"
				 text="{message}"
				 includeIn="loading,loadingToCorpus"/>   
		
	</s:Form>
	
	<s:HGroup> 
		
		<s:Button label="OK"
				  click="handleOkEvent();" 
				  includeIn="default,corpusSpecified" /> 

		<s:Button label="Cancel"
				  click="handleCloseEvent();"/> 
	</s:HGroup> 
	
</s:TitleWindow>